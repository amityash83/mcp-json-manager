name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [published]

jobs:
  # Build and test on every push/PR
  test:
    name: Build Extension
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm install

      - name: Compile TypeScript
        run: npm run compile

      - name: Package extension (test build)
        run: npx vsce package --out mcp-json-manager-test-${{ github.sha }}.vsix

      - name: Upload test artifact
        uses: actions/upload-artifact@v4
        with:
          name: extension-test-build
          path: mcp-json-manager-test-${{ github.sha }}.vsix
          retention-days: 7

      - name: Add build info to summary
        run: |
          echo "## üì¶ Extension Build Complete" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Status**: ‚úÖ Success" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Artifact**: mcp-json-manager-test-${{ github.sha }}.vsix" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üß™ Testing Instructions" >> $GITHUB_STEP_SUMMARY
          echo "1. Download the artifact from this build" >> $GITHUB_STEP_SUMMARY
          echo "2. Install in VS Code: \`code --install-extension mcp-json-manager-test-${{ github.sha }}.vsix\`" >> $GITHUB_STEP_SUMMARY
          echo "3. Test the extension functionality" >> $GITHUB_STEP_SUMMARY
          echo "4. If ready to publish, create a release with proper publisher name" >> $GITHUB_STEP_SUMMARY

  # Only publish on release AND when secrets are configured
  publish:
    name: Publish Extension
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'release' && github.event.action == 'published'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for required secrets
        run: |
          if [[ -z "${{ secrets.VSCE_PAT }}" ]] || [[ -z "${{ secrets.PUBLISHER_NAME }}" ]]; then
            echo "‚ùå Missing required secrets for publishing:"
            echo "   - VSCE_PAT: ${{ secrets.VSCE_PAT && 'configured' || 'missing' }}"
            echo "   - PUBLISHER_NAME: ${{ secrets.PUBLISHER_NAME && 'configured' || 'missing' }}"
            echo ""
            echo "üîß To enable publishing:"
            echo "1. Create Azure DevOps Personal Access Token with Marketplace scope"
            echo "2. Add VSCE_PAT secret with your token"
            echo "3. Add PUBLISHER_NAME secret with your publisher ID"
            echo "4. Update package.json with your real publisher name"
            echo ""
            echo "üì¶ For now, using test build artifacts only"
            exit 1
          fi
          echo "‚úÖ Publishing secrets are configured"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

      - name: Compile TypeScript
        run: npm run compile

      - name: Extract version from tag
        id: get_version
        run: |
          VERSION=${GITHUB_REF/refs\/tags\/v/}
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Publishing version: $VERSION"

      - name: Update package.json with real publisher
        run: |
          npm pkg set publisher="${{ secrets.PUBLISHER_NAME }}"
          npm version ${{ steps.get_version.outputs.VERSION }} --no-git-tag-version

      - name: Package extension for release
        run: npx vsce package --out mcp-json-manager-${{ steps.get_version.outputs.VERSION }}.vsix

      - name: Publish to VS Code Marketplace
        run: npx vsce publish -p ${{ secrets.VSCE_PAT }}
        env:
          VSCE_PAT: ${{ secrets.VSCE_PAT }}

      - name: Publish to Open VSX Registry
        run: npx ovsx publish mcp-json-manager-${{ steps.get_version.outputs.VERSION }}.vsix -p ${{ secrets.OVSX_PAT }}
        continue-on-error: true
        env:
          OVSX_PAT: ${{ secrets.OVSX_PAT }}

      - name: Upload release artifact
        uses: actions/upload-artifact@v4
        with:
          name: extension-release-${{ steps.get_version.outputs.VERSION }}
          path: mcp-json-manager-${{ steps.get_version.outputs.VERSION }}.vsix

      - name: Attach VSIX to GitHub Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: mcp-json-manager-${{ steps.get_version.outputs.VERSION }}.vsix
          asset_name: mcp-json-manager-${{ steps.get_version.outputs.VERSION }}.vsix
          asset_content_type: application/zip

  # Pre-release validation
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate release tag format
        run: |
          if [[ ! "${GITHUB_REF}" =~ ^refs/tags/v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "‚ùå Invalid tag format. Use semantic versioning: v1.0.0"
            exit 1
          fi
          echo "‚úÖ Tag format is valid"