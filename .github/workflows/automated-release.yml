name: Automated Release

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      release_notes:
        description: 'Release notes (optional)'
        required: false
        type: string

  # Also trigger on manual tag push
  push:
    tags:
      - 'v*'

jobs:
  automated-release:
    name: Create Automated Release
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Required for creating releases
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for changelog

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

      - name: Compile extension
        run: npm run compile

      # Only bump version if triggered by workflow_dispatch
      - name: Determine version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # Get the latest Git tag to determine current version
            LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
            CURRENT_VERSION=${LATEST_TAG#v}  # Remove 'v' prefix
            
            echo "Latest tag: $LATEST_TAG"
            echo "Current version: $CURRENT_VERSION"
            
            # Parse version components
            IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
            
            # Increment based on version type
            case "${{ github.event.inputs.version_type }}" in
              "major")
                MAJOR=$((MAJOR + 1))
                MINOR=0
                PATCH=0
                ;;
              "minor") 
                MINOR=$((MINOR + 1))
                PATCH=0
                ;;
              "patch")
                PATCH=$((PATCH + 1))
                ;;
            esac
            
            NEW_VERSION="$MAJOR.$MINOR.$PATCH"
            TAG_NAME="v$NEW_VERSION"
            
            echo "New version: $NEW_VERSION"
            echo "New tag: $TAG_NAME"
            
            # Update package.json with new version
            npm version $NEW_VERSION --no-git-tag-version
            
            echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
            echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
            echo "is_new_version=true" >> $GITHUB_OUTPUT
            echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          else
            # Extract from existing tag
            VERSION=${GITHUB_REF/refs\/tags\/v/}
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "tag_name=v$VERSION" >> $GITHUB_OUTPUT
            echo "is_new_version=false" >> $GITHUB_OUTPUT
          fi

      - name: Generate changelog
        id: changelog
        run: |
          # Simple changelog generation
          if [[ -f CHANGELOG.md ]]; then
            CHANGELOG=$(sed -n "/## \[${{ steps.version.outputs.version }}\]/,/## \[/p" CHANGELOG.md | sed '$d')
          else
            CHANGELOG="## Changes in ${{ steps.version.outputs.tag_name }}
          
          $(git log --oneline --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")..HEAD)"
          fi
          
          # Use input release notes if provided
          if [[ -n "${{ github.event.inputs.release_notes }}" ]]; then
            CHANGELOG="${{ github.event.inputs.release_notes }}"
          fi
          
          # Save changelog to output
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Package extension
        run: |
          npx vsce package --out mcp-json-manager-${{ steps.version.outputs.version }}.vsix

      - name: Create/update tag (if new version)
        if: steps.version.outputs.is_new_version == 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Check if tag already exists and handle it
          if git rev-parse ${{ steps.version.outputs.tag_name }} >/dev/null 2>&1; then
            echo "⚠️ Tag ${{ steps.version.outputs.tag_name }} already exists!"
            echo "Current version: ${{ steps.version.outputs.current_version }}"
            echo "Requested version: ${{ steps.version.outputs.version }}"
            
            # If it's the same version, this is likely a re-run or conflict
            if [[ "${{ steps.version.outputs.current_version }}" == "${{ steps.version.outputs.version }}" ]]; then
              echo "❌ Cannot create duplicate version. Current: ${{ steps.version.outputs.current_version }}, Requested: ${{ steps.version.outputs.version }}"
              echo "This suggests the version calculation is incorrect or this is a duplicate release."
              exit 1
            fi
            
            echo "Deleting existing tag to recreate with new release..."
            git tag -d ${{ steps.version.outputs.tag_name }}
            git push origin :refs/tags/${{ steps.version.outputs.tag_name }} || true
          fi
          
          # Commit version bump
          git add package.json
          git commit -m "chore: bump version to ${{ steps.version.outputs.tag_name }}" || echo "No changes to commit"
          
          # Create new tag
          git tag ${{ steps.version.outputs.tag_name }}
          
          # Push changes
          git push origin main || echo "Nothing to push to main"
          git push origin ${{ steps.version.outputs.tag_name }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.tag_name }}
          name: "Release ${{ steps.version.outputs.tag_name }}"
          body: |
            # MCP JSON Manager ${{ steps.version.outputs.tag_name }}
            
            **Version History:**
            - Previous: v${{ steps.version.outputs.current_version || '0.0.0' }}
            - Current: ${{ steps.version.outputs.tag_name }}
            - Type: ${{ github.event.inputs.version_type || 'manual' }}
            
            ${{ steps.changelog.outputs.changelog }}
            
            ## 📦 Installation
            
            Download the `mcp-json-manager-${{ steps.version.outputs.version }}.vsix` file and install:
            
            ```bash
            code --install-extension mcp-json-manager-${{ steps.version.outputs.version }}.vsix
            ```
            
            ## 🧪 Testing
            
            This extension provides a visual interface for managing MCP configurations:
            1. Open Command Palette (`Ctrl+Shift+P`)
            2. Search for "MCP: Open MCP Manager"
            3. Create or edit MCP server configurations
            
            ## 📝 Feedback
            
            Please report issues or suggest features in the [GitHub Issues](https://github.com/${{ github.repository }}/issues).
            
            ---
            
            **Note**: This is currently a test release. Marketplace publishing requires publisher configuration.
          files: |
            mcp-json-manager-${{ steps.version.outputs.version }}.vsix
          draft: false
          prerelease: false

      - name: Check marketplace configuration
        id: check_marketplace
        run: |
          if [[ -n "${{ secrets.VSCE_PAT }}" ]] && [[ -n "${{ secrets.PUBLISHER_NAME }}" ]]; then
            echo "marketplace_configured=true" >> $GITHUB_OUTPUT
          else
            echo "marketplace_configured=false" >> $GITHUB_OUTPUT
          fi

      - name: Publish to marketplace
        if: steps.check_marketplace.outputs.marketplace_configured == 'true'
        run: |
          # Update publisher name for marketplace
          npm pkg set publisher="${{ secrets.PUBLISHER_NAME }}"
          
          # Publish to VS Code Marketplace
          npx vsce publish -p ${{ secrets.VSCE_PAT }}
          
          echo "✅ Published to VS Code Marketplace!"
        continue-on-error: true

      - name: Check Open VSX configuration  
        id: check_ovsx
        run: |
          if [[ -n "${{ secrets.OVSX_PAT }}" ]]; then
            echo "ovsx_configured=true" >> $GITHUB_OUTPUT
          else
            echo "ovsx_configured=false" >> $GITHUB_OUTPUT
          fi

      - name: Publish to Open VSX
        if: steps.check_ovsx.outputs.ovsx_configured == 'true'
        run: |
          npx ovsx publish mcp-json-manager-${{ steps.version.outputs.version }}.vsix -p ${{ secrets.OVSX_PAT }}
          echo "✅ Published to Open VSX Registry!"
        continue-on-error: true

      - name: Update release with marketplace links
        if: steps.check_marketplace.outputs.marketplace_configured == 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.tag_name }}
          body: |
            # MCP JSON Manager ${{ steps.version.outputs.tag_name }}
            
            ${{ steps.changelog.outputs.changelog }}
            
            ## 📦 Installation Options
            
            ### Option 1: VS Code Marketplace (Recommended)
            ```bash
            code --install-extension ${{ secrets.PUBLISHER_NAME }}.mcp-json-manager
            ```
            
            ### Option 2: Manual Installation
            Download the `mcp-json-manager-${{ steps.version.outputs.version }}.vsix` file and install:
            ```bash
            code --install-extension mcp-json-manager-${{ steps.version.outputs.version }}.vsix
            ```
            
            ## 🔗 Links
            - [VS Code Marketplace](https://marketplace.visualstudio.com/items?itemName=${{ secrets.PUBLISHER_NAME }}.mcp-json-manager)
            - [Repository](https://github.com/${{ github.repository }})
            - [Issues](https://github.com/${{ github.repository }}/issues)
            
            ## 🧪 Usage
            
            1. Open Command Palette (`Ctrl+Shift+P`)
            2. Search for "MCP: Open MCP Manager"
            3. Create or edit MCP server configurations visually
            
            ---
            
            **🎉 Now available on VS Code Marketplace!**
          append_body: false

      - name: Summary
        run: |
          echo "## 🎉 Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ steps.version.outputs.tag_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Package**: mcp-json-manager-${{ steps.version.outputs.version }}.vsix" >> $GITHUB_STEP_SUMMARY
          echo "- **GitHub Release**: ✅ Created" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ steps.check_marketplace.outputs.marketplace_configured }}" == "true" ]]; then
            echo "- **VS Code Marketplace**: ✅ Published" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **VS Code Marketplace**: ⏳ Not configured (add VSCE_PAT and PUBLISHER_NAME secrets)" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ steps.check_ovsx.outputs.ovsx_configured }}" == "true" ]]; then
            echo "- **Open VSX**: ✅ Published" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Open VSX**: ⏳ Not configured (add OVSX_PAT secret)" >> $GITHUB_STEP_SUMMARY
          fi